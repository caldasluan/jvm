#ifndef JVM_INSTRUCTIONS_H
#define JVM_INSTRUCTIONS_H

#define OP_NO 0                // no bytes
#define OP_1_LV 1              // 1 byte local variable
#define OP_LDC 2               // 1 byte that references something in the constant pool
#define OP_BIPUSH 3            // 1 byte to be sign extended and pushed
#define OP_2_CP 4              // 2 bytes that references something in the constant pool
#define OP_2_CPWIDE 5          // 2 bytes references a two word constant
#define OP_SIPUSH 6            // 2 bytes to be sign extended and pushed
#define OP_2_BRANCH 7          // 2 bytes of offset to be added to PC
#define OP_4_BRANCH 8          // 4 bytes of offset to be added to PC
#define OP_IINC 9              // 1 byte local variable, 1 byte to be sign extended added to local variable
#define OP_INVOKE_DYNAMIC 10   // 2 bytes references constant pool, 2 bytes = 0
#define OP_INVOKE_INTERFACE 11 // 2 bytes references constant pool, 1 byte ammount of arguments, 1 byte = 0 (why tho?)
#define OP_LOOKUPSWITCH 12     // 0-3 padding, 4 bytes default, 4 bytes npairs, (8*npairs) bytes pairs
#define OP_MULTIANEWARRAY 13   // 2 bytes constant index, 1 byte dimension of multiaarray
#define OP_NEWARRAY 14         // 1 byte array type
#define OP_TABLESWITCH 15      // 0-3 padding, 4 bytes default, 4 bytes low, 4 bytes high, (4 *(high - low + 1)) bytes branch offsets
#define OP_WIDE 16             // 1 byte of opcode to be widened, 2 bytes

#include <array>
#include <cstdint>
#include <string>
#include "../model/Frame.h"

class Instruction
{
public:
  Instruction(const char *_mnemonic, const uint8_t _operands) : mnemonic(_mnemonic), operands(_operands){};

  const char *mnemonic;
  const uint8_t operands;
  const void (*execution)(Frame&, uint32_t);
};

const std::array<Instruction, 202> instructions_mnemonics = {
    /* 0x00 */ Instruction("nop", OP_NO),
    /* 0x01 */ Instruction("aconst_null", OP_NO),
    /* 0x02 */ Instruction("iconst_m1", OP_NO),
    /* 0x03 */ Instruction("iconst_0", OP_NO),
    /* 0x04 */ Instruction("iconst_1", OP_NO),
    /* 0x05 */ Instruction("iconst_2", OP_NO),
    /* 0x06 */ Instruction("iconst_3", OP_NO),
    /* 0x07 */ Instruction("iconst_4", OP_NO),
    /* 0x08 */ Instruction("iconst_5", OP_NO),
    /* 0x09 */ Instruction("lconst_0", OP_NO),
    /* 0x0a */ Instruction("lconst_1", OP_NO),
    /* 0x0b */ Instruction("fconst_0", OP_NO),
    /* 0x0c */ Instruction("fconst_1", OP_NO),
    /* 0x0d */ Instruction("fconst_2", OP_NO),
    /* 0x0e */ Instruction("dconst_0", OP_NO),
    /* 0x0f */ Instruction("dconst_1", OP_NO),
    /* 0x10 */ Instruction("bipush", OP_BIPUSH),
    /* 0x11 */ Instruction("sipush", OP_SIPUSH),
    /* 0x12 */ Instruction("ldc", OP_LDC),
    /* 0x13 */ Instruction("ldc_w", OP_2_CP),
    /* 0x14 */ Instruction("ldc2_w", OP_2_CPWIDE),
    /* 0x15 */ Instruction("iload", OP_1_LV),
    /* 0x16 */ Instruction("lload", OP_1_LV),
    /* 0x17 */ Instruction("fload", OP_1_LV),
    /* 0x18 */ Instruction("dload", OP_1_LV),
    /* 0x19 */ Instruction("aload", OP_1_LV),
    /* 0x1a */ Instruction("iload_0", OP_NO),
    /* 0x1b */ Instruction("iload_1", OP_NO),
    /* 0x1c */ Instruction("iload_2", OP_NO),
    /* 0x1d */ Instruction("iload_3", OP_NO),
    /* 0x1e */ Instruction("lload_0", OP_NO),
    /* 0x1f */ Instruction("lload_1", OP_NO),
    /* 0x20 */ Instruction("lload_2", OP_NO),
    /* 0x21 */ Instruction("lload_3", OP_NO),
    /* 0x22 */ Instruction("fload_0", OP_NO),
    /* 0x23 */ Instruction("fload_1", OP_NO),
    /* 0x24 */ Instruction("fload_2", OP_NO),
    /* 0x25 */ Instruction("fload_3", OP_NO),
    /* 0x26 */ Instruction("dload_0", OP_NO),
    /* 0x27 */ Instruction("dload_1", OP_NO),
    /* 0x28 */ Instruction("dload_2", OP_NO),
    /* 0x29 */ Instruction("dload_3", OP_NO),
    /* 0x2a */ Instruction("aload_0", OP_NO),
    /* 0x2b */ Instruction("aload_1", OP_NO),
    /* 0x2c */ Instruction("aload_2", OP_NO),
    /* 0x2d */ Instruction("aload_3", OP_NO),
    /* 0x2e */ Instruction("iaload", OP_NO),
    /* 0x2f */ Instruction("laload", OP_NO),
    /* 0x30 */ Instruction("faload", OP_NO),
    /* 0x31 */ Instruction("daload", OP_NO),
    /* 0x32 */ Instruction("aaload", OP_NO),
    /* 0x33 */ Instruction("baload", OP_NO),
    /* 0x34 */ Instruction("caload", OP_NO),
    /* 0x35 */ Instruction("saload", OP_NO),
    /* 0x36 */ Instruction("istore", OP_1_LV),
    /* 0x37 */ Instruction("lstore", OP_1_LV),
    /* 0x38 */ Instruction("fstore", OP_1_LV),
    /* 0x39 */ Instruction("dstore", OP_1_LV),
    /* 0x3a */ Instruction("astore", OP_1_LV),
    /* 0x3b */ Instruction("istore_0", OP_NO),
    /* 0x3c */ Instruction("istore_1", OP_NO),
    /* 0x3d */ Instruction("istore_2", OP_NO),
    /* 0x3e */ Instruction("istore_3", OP_NO),
    /* 0x3f */ Instruction("lstore_0", OP_NO),
    /* 0x40 */ Instruction("lstore_1", OP_NO),
    /* 0x41 */ Instruction("lstore_2", OP_NO),
    /* 0x42 */ Instruction("lstore_3", OP_NO),
    /* 0x43 */ Instruction("fstore_0", OP_NO),
    /* 0x44 */ Instruction("fstore_1", OP_NO),
    /* 0x45 */ Instruction("fstore_2", OP_NO),
    /* 0x46 */ Instruction("fstore_3", OP_NO),
    /* 0x47 */ Instruction("dstore_0", OP_NO),
    /* 0x48 */ Instruction("dstore_1", OP_NO),
    /* 0x49 */ Instruction("dstore_2", OP_NO),
    /* 0x4a */ Instruction("dstore_3", OP_NO),
    /* 0x4b */ Instruction("astore_0", OP_NO),
    /* 0x4c */ Instruction("astore_1", OP_NO),
    /* 0x4d */ Instruction("astore_2", OP_NO),
    /* 0x4e */ Instruction("astore_3", OP_NO),
    /* 0x4f */ Instruction("iastore", OP_NO),
    /* 0x50 */ Instruction("lastore", OP_NO),
    /* 0x51 */ Instruction("fastore", OP_NO),
    /* 0x52 */ Instruction("dastore", OP_NO),
    /* 0x53 */ Instruction("aastore", OP_NO),
    /* 0x54 */ Instruction("bastore", OP_NO),
    /* 0x55 */ Instruction("castore", OP_NO),
    /* 0x56 */ Instruction("sastore", OP_NO),
    /* 0x57 */ Instruction("pop", OP_NO),
    /* 0x58 */ Instruction("pop2", OP_NO),
    /* 0x59 */ Instruction("dup", OP_NO),
    /* 0x5a */ Instruction("dup_x1", OP_NO),
    /* 0x5b */ Instruction("dup_x2", OP_NO),
    /* 0x5c */ Instruction("dup2", OP_NO),
    /* 0x5d */ Instruction("dup2_x1", OP_NO),
    /* 0x5e */ Instruction("dup2_x2", OP_NO),
    /* 0x5f */ Instruction("swap", OP_NO),
    /* 0x60 */ Instruction("iadd", OP_NO),
    /* 0x61 */ Instruction("ladd", OP_NO),
    /* 0x62 */ Instruction("fadd", OP_NO),
    /* 0x63 */ Instruction("dadd", OP_NO),
    /* 0x64 */ Instruction("isub", OP_NO),
    /* 0x65 */ Instruction("lsub", OP_NO),
    /* 0x66 */ Instruction("fsub", OP_NO),
    /* 0x67 */ Instruction("dsub", OP_NO),
    /* 0x68 */ Instruction("imul", OP_NO),
    /* 0x69 */ Instruction("lmul", OP_NO),
    /* 0x6a */ Instruction("fmul", OP_NO),
    /* 0x6b */ Instruction("dmul", OP_NO),
    /* 0x6c */ Instruction("idiv", OP_NO),
    /* 0x6d */ Instruction("ldiv", OP_NO),
    /* 0x6e */ Instruction("fdiv", OP_NO),
    /* 0x6f */ Instruction("ddiv", OP_NO),
    /* 0x70 */ Instruction("irem", OP_NO),
    /* 0x71 */ Instruction("lrem", OP_NO),
    /* 0x72 */ Instruction("frem", OP_NO),
    /* 0x73 */ Instruction("drem", OP_NO),
    /* 0x74 */ Instruction("ineg", OP_NO),
    /* 0x75 */ Instruction("lneg", OP_NO),
    /* 0x76 */ Instruction("fneg", OP_NO),
    /* 0x77 */ Instruction("dneg", OP_NO),
    /* 0x78 */ Instruction("ishl", OP_NO),
    /* 0x79 */ Instruction("lshl", OP_NO),
    /* 0x7a */ Instruction("ishr", OP_NO),
    /* 0x7b */ Instruction("lshr", OP_NO),
    /* 0x7c */ Instruction("iushr", OP_NO),
    /* 0x7d */ Instruction("lushr", OP_NO),
    /* 0x7e */ Instruction("iand", OP_NO),
    /* 0x7f */ Instruction("land", OP_NO),
    /* 0x80 */ Instruction("ior", OP_NO),
    /* 0x81 */ Instruction("lor", OP_NO),
    /* 0x82 */ Instruction("ixor", OP_NO),
    /* 0x83 */ Instruction("lxor", OP_NO),
    /* 0x84 */ Instruction("iinc", OP_IINC),
    /* 0x85 */ Instruction("i2l", OP_NO),
    /* 0x86 */ Instruction("i2f", OP_NO),
    /* 0x87 */ Instruction("i2d", OP_NO),
    /* 0x88 */ Instruction("l2i", OP_NO),
    /* 0x89 */ Instruction("l2f", OP_NO),
    /* 0x8a */ Instruction("l2d", OP_NO),
    /* 0x8b */ Instruction("f2i", OP_NO),
    /* 0x8c */ Instruction("f2l", OP_NO),
    /* 0x8d */ Instruction("f2d", OP_NO),
    /* 0x8e */ Instruction("d2i", OP_NO),
    /* 0x8f */ Instruction("d2l", OP_NO),
    /* 0x90 */ Instruction("d2f", OP_NO),
    /* 0x91 */ Instruction("i2b", OP_NO),
    /* 0x92 */ Instruction("i2c", OP_NO),
    /* 0x93 */ Instruction("i2s", OP_NO),
    /* 0x94 */ Instruction("lcmp", OP_NO),
    /* 0x95 */ Instruction("fcmpl", OP_NO),
    /* 0x96 */ Instruction("fcmpg", OP_NO),
    /* 0x97 */ Instruction("dcmpl", OP_NO),
    /* 0x98 */ Instruction("dcmpg", OP_NO),
    /* 0x99 */ Instruction("ifeq", OP_2_BRANCH),
    /* 0x9a */ Instruction("ifne", OP_2_BRANCH),
    /* 0x9b */ Instruction("iflt", OP_2_BRANCH),
    /* 0x9c */ Instruction("ifge", OP_2_BRANCH),
    /* 0x9d */ Instruction("ifgt", OP_2_BRANCH),
    /* 0x9e */ Instruction("ifle", OP_2_BRANCH),
    /* 0x9f */ Instruction("if_icmpeq", OP_2_BRANCH),
    /* 0xa0 */ Instruction("if_icmpne", OP_2_BRANCH),
    /* 0xa1 */ Instruction("if_icmplt", OP_2_BRANCH),
    /* 0xa2 */ Instruction("if_icmpge", OP_2_BRANCH),
    /* 0xa3 */ Instruction("if_icmpgt", OP_2_BRANCH),
    /* 0xa4 */ Instruction("if_icmple", OP_2_BRANCH),
    /* 0xa5 */ Instruction("if_acmpeq", OP_2_BRANCH),
    /* 0xa6 */ Instruction("if_acmpne", OP_2_BRANCH),
    /* 0xa7 */ Instruction("goto", OP_2_BRANCH),
    /* 0xa8 */ Instruction("jsr", OP_2_BRANCH),
    /* 0xa9 */ Instruction("ret", OP_1_LV),
    /* 0xaa */ Instruction("tableswitch", OP_TABLESWITCH),
    /* 0xab */ Instruction("lookupswitch", OP_LOOKUPSWITCH),
    /* 0xac */ Instruction("ireturn", OP_NO),
    /* 0xad */ Instruction("lreturn", OP_NO),
    /* 0xae */ Instruction("freturn", OP_NO),
    /* 0xaf */ Instruction("dreturn", OP_NO),
    /* 0xb0 */ Instruction("areturn", OP_NO),
    /* 0xb1 */ Instruction("return", OP_NO),
    /* 0xb2 */ Instruction("getstatic", OP_2_CP),
    /* 0xb3 */ Instruction("putstatic", OP_2_CP),
    /* 0xb4 */ Instruction("getfield", OP_2_CP),
    /* 0xb5 */ Instruction("putfield", OP_2_CP),
    /* 0xb6 */ Instruction("invokevirtual", OP_2_CP),
    /* 0xb7 */ Instruction("invokespecial", OP_2_CP),
    /* 0xb8 */ Instruction("invokestatic", OP_2_CP),
    /* 0xb9 */ Instruction("invokeinterface", OP_INVOKE_INTERFACE),
    /* 0xba */ Instruction("invokedynamic", OP_INVOKE_DYNAMIC),
    /* 0xbb */ Instruction("new", OP_2_CP),
    /* 0xbc */ Instruction("newarray", OP_NEWARRAY),
    /* 0xbd */ Instruction("anewarray", OP_2_CP),
    /* 0xbe */ Instruction("arraylength", OP_NO),
    /* 0xbf */ Instruction("athrow", OP_NO),
    /* 0xc0 */ Instruction("checkcast", OP_2_CP),
    /* 0xc1 */ Instruction("instanceof", OP_2_CP),
    /* 0xc2 */ Instruction("monitorenter", OP_NO),
    /* 0xc3 */ Instruction("monitorexit", OP_NO),
    /* 0xc4 */ Instruction("wide", OP_WIDE),
    /* 0xc5 */ Instruction("multianewarray", OP_MULTIANEWARRAY),
    /* 0xc6 */ Instruction("ifnull", OP_2_BRANCH),
    /* 0xc7 */ Instruction("ifnonnull", OP_2_BRANCH),
    /* 0xc8 */ Instruction("goto_w", OP_4_BRANCH),
    /* 0xc9 */ Instruction("jsr_w", OP_4_BRANCH)};

const char *const array_types[] = {
    "",
    "",
    "",
    "",
    "T_BOOLEAN",
    "T_CHAR",
    "T_FLOAT",
    "T_DOUBLE",
    "T_BYTE",
    "T_SHORT",
    "T_INT",
    "T_LONG"};

#endif // JVM_INSTRUCTIONS_H